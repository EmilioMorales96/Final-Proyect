import { useState, useEffect } from 'react';import {   FiCloud,   FiUser,   FiPhone,   FiGlobe,   FiBriefcase,   FiDollarSign,   FiUsers,  FiActivity,  FiRefreshCw,  FiCheckCircle,  FiXCircle,  FiClock,  FiBarChart,  FiTrendingUp,  FiZap,  FiDatabase,  FiLink} from 'react-icons/fi';import {   HiOutlineChartBar,  HiOutlineUserGroup,  HiOutlineBriefcase,  HiOutlineGlobe} from 'react-icons/hi';import toast from 'react-hot-toast';const API_URL = import.meta.env.VITE_API_URL;/** * Advanced Salesforce Dashboard Component - Diseño UI Mejorado * Provides comprehensive Salesforce integration management with modern design */const SalesforceDashboard = () => {  const [activeTab, setActiveTab] = useState('overview');  const [salesforceStatus, setSalesforceStatus] = useState(null);  const [syncHistory, setSyncHistory] = useState([]);  const [stats, setStats] = useState(null);  const [loading, setLoading] = useState(false);  useEffect(() => {    fetchSalesforceStatus();    fetchSyncHistory();    fetchStats();  }, []);  const fetchSalesforceStatus = async () => {    try {      const response = await fetch(`${API_URL}/api/auth/oauth/status`);      const data = await response.json();      setSalesforceStatus(data.salesforce);    } catch (error) {      console.error('Error fetching Salesforce status:', error);    }  };  const fetchSyncHistory = async () => {    try {      const response = await fetch(`${API_URL}/api/salesforce/sync-history`, {        headers: {          'Authorization': `Bearer ${localStorage.getItem('token')}`        }      });      const data = await response.json();      setSyncHistory(data.history || []);    } catch (error) {      console.error('Error fetching sync history:', error);    }  };  const fetchStats = async () => {    try {      const response = await fetch(`${API_URL}/api/salesforce/stats`, {        headers: {          'Authorization': `Bearer ${localStorage.getItem('token')}`        }      });      const data = await response.json();      setStats(data.stats || {});    } catch (error) {      console.error('Error fetching stats:', error);    }  };  const syncAllForms = async () => {    setLoading(true);    try {      const response = await fetch(`${API_URL}/api/salesforce/sync-all-forms`, {        method: 'POST',        headers: {          'Authorization': `Bearer ${localStorage.getItem('token')}`        }      });            const data = await response.json();            if (response.ok) {        toast.success(`¡${data.synced} formularios sincronizados con Salesforce!`);        fetchSyncHistory();        fetchStats();      } else {        toast.error(data.message || 'Error en la sincronización');      }    } catch (error) {      toast.error('Error de conexión');      console.error('Sync error:', error);    } finally {      setLoading(false);    }  };  const dashboardTabs = [    {      id: 'overview',      name: 'Vista General',      icon: <HiOutlineChartBar className="w-5 h-5" />,      color: 'blue'    },    {      id: 'sync',      name: 'Sincronización',      icon: <FiRefreshCw className="w-5 h-5" />,      color: 'purple'    },    {      id: 'history',      name: 'Historial',      icon: <FiClock className="w-5 h-5" />,      color: 'indigo'    },    {      id: 'analytics',      name: 'Analytics',      icon: <FiTrendingUp className="w-5 h-5" />,      color: 'green'    }  ];  const StatCard = ({ title, value, subtitle, icon, color, trend }) => (    <div className="bg-white rounded-xl border border-gray-200 p-6 hover:shadow-lg transition-shadow">      <div className="flex items-center justify-between">        <div>          <p className="text-sm font-medium text-gray-600">{title}</p>          <p className="text-3xl font-bold text-gray-900 mt-2">{value}</p>          {subtitle && (            <p className="text-sm text-gray-500 mt-1">{subtitle}</p>          )}          {trend && (            <div className={`flex items-center mt-2 text-sm ${              trend.type === 'up' ? 'text-green-600' : 'text-red-600'            }`}>              <FiTrendingUp className="w-4 h-4 mr-1" />              <span>{trend.value}</span>            </div>          )}        </div>        <div className={`p-3 bg-${color}-100 rounded-lg`}>          {icon}        </div>      </div>    </div>  );  const OverviewTab = () => (    <div className="space-y-6">      {/* Estadísticas principales con diseño moderno */}      <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6">        <StatCard          title="Cuentas Sincronizadas"          value={stats?.totalAccounts || '0'}          subtitle="Últimas 24 horas"          icon={<HiOutlineBriefcase className="w-6 h-6 text-blue-600" />}          color="blue"          trend={{ type: 'up', value: '+12%' }}        />        <StatCard          title="Contactos Activos"          value={stats?.totalContacts || '0'}          subtitle="Total en Salesforce"          icon={<HiOutlineUserGroup className="w-6 h-6 text-purple-600" />}          color="purple"          trend={{ type: 'up', value: '+8%' }}        />        <StatCard          title="Formularios Procesados"          value={stats?.totalForms || '0'}          subtitle="Este mes"          icon={<FiDatabase className="w-6 h-6 text-green-600" />}          color="green"          trend={{ type: 'up', value: '+24%' }}        />        <StatCard          title="Tasa de Éxito"          value="98.5%"          subtitle="Sincronización exitosa"          icon={<FiZap className="w-6 h-6 text-orange-600" />}          color="orange"          trend={{ type: 'up', value: '+2%' }}        />      </div>      {/* Gráfico de actividad reciente */}      <div className="bg-white rounded-xl border border-gray-200 p-6">        <div className="flex items-center justify-between mb-6">          <h3 className="text-lg font-semibold text-gray-900">Actividad Reciente</h3>          <div className="flex space-x-2">            <button className="px-3 py-1 text-sm bg-blue-100 text-blue-600 rounded-lg">7 días</button>            <button className="px-3 py-1 text-sm text-gray-600 hover:bg-gray-100 rounded-lg">30 días</button>          </div>        </div>                {/* Simulación de gráfico de actividad */}        <div className="h-64 bg-gradient-to-t from-blue-50 to-transparent rounded-lg flex items-end justify-around p-4">          {[65, 78, 90, 45, 88, 76, 95].map((height, index) => (            <div              key={index}              className="bg-blue-500 rounded-t-lg w-8 hover:bg-blue-600 transition-colors cursor-pointer"              style={{ height: `${height}%` }}              title={`Día ${index + 1}: ${height} sincronizaciones`}            />          ))}        </div>      </div>      {/* Estado de conexión detallado */}      <div className="grid grid-cols-1 lg:grid-cols-2 gap-6">        <div className="bg-white rounded-xl border border-gray-200 p-6">          <h3 className="text-lg font-semibold text-gray-900 mb-4">Estado de Conexión</h3>          <div className="space-y-4">            <div className="flex items-center justify-between">              <span className="text-gray-600">Estado de API</span>              <div className="flex items-center space-x-2 text-green-600">                <FiCheckCircle className="w-4 h-4" />                <span className="text-sm font-medium">Conectado</span>              </div>            </div>            <div className="flex items-center justify-between">              <span className="text-gray-600">Última sincronización</span>              <span className="text-sm text-gray-500">Hace 2 minutos</span>            </div>            <div className="flex items-center justify-between">              <span className="text-gray-600">Rate Limits</span>              <span className="text-sm text-gray-500">2,500 / 5,000</span>            </div>            <div className="w-full bg-gray-200 rounded-full h-2">              <div className="bg-blue-600 h-2 rounded-full" style={{ width: '50%' }}></div>            </div>          </div>        </div>        <div className="bg-white rounded-xl border border-gray-200 p-6">          <h3 className="text-lg font-semibold text-gray-900 mb-4">Acciones Rápidas</h3>          <div className="space-y-3">            <button               onClick={syncAllForms}              disabled={loading}              className="w-full flex items-center justify-center space-x-2 p-3 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors"            >              <FiRefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />              <span>{loading ? 'Sincronizando...' : 'Sincronizar Todo'}</span>            </button>            <button className="w-full flex items-center justify-center space-x-2 p-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">              <FiLink className="w-4 h-4" />              <span>Verificar Conexión</span>            </button>            <button className="w-full flex items-center justify-center space-x-2 p-3 border border-gray-300 text-gray-700 rounded-lg hover:bg-gray-50 transition-colors">              <FiBarChart className="w-4 h-4" />              <span>Generar Reporte</span>            </button>          </div>        </div>      </div>    </div>  );  const SyncTab = () => (    <div className="space-y-6">      <div className="bg-white rounded-xl border border-gray-200 p-6">        <h3 className="text-lg font-semibold text-gray-900 mb-4">Centro de Sincronización</h3>        <div className="space-y-4">          <div className="p-4 border border-gray-200 rounded-lg">            <div className="flex items-center justify-between mb-2">              <span className="font-medium">Sincronización Automática</span>              <label className="relative inline-flex items-center cursor-pointer">                <input type="checkbox" className="sr-only peer" defaultChecked />                <div className="w-11 h-6 bg-gray-200 peer-focus:outline-none peer-focus:ring-4 peer-focus:ring-blue-300 rounded-full peer peer-checked:after:translate-x-full peer-checked:after:border-white after:content-[''] after:absolute after:top-[2px] after:left-[2px] after:bg-white after:border-gray-300 after:border after:rounded-full after:h-5 after:w-5 after:transition-all peer-checked:bg-blue-600"></div>              </label>            </div>            <p className="text-sm text-gray-600">Los nuevos formularios se sincronizarán automáticamente cada 15 minutos</p>          </div>                    <div className="p-4 border border-gray-200 rounded-lg">            <h4 className="font-medium mb-2">Configuración de Mapeo</h4>            <div className="grid grid-cols-1 md:grid-cols-2 gap-4">              <div>                <label className="block text-sm font-medium text-gray-700 mb-1">Campo de Email</label>                <select className="w-full border border-gray-300 rounded-md px-3 py-2">                  <option>Email</option>                  <option>Contact_Email__c</option>                </select>              </div>              <div>                <label className="block text-sm font-medium text-gray-700 mb-1">Campo de Nombre</label>                <select className="w-full border border-gray-300 rounded-md px-3 py-2">                  <option>FirstName</option>                  <option>Full_Name__c</option>                </select>              </div>            </div>          </div>        </div>      </div>    </div>  );  const HistoryTab = () => (    <div className="space-y-6">      <div className="bg-white rounded-xl border border-gray-200 overflow-hidden">        <div className="p-6 border-b border-gray-200">          <h3 className="text-lg font-semibold text-gray-900">Historial de Sincronización</h3>        </div>        <div className="overflow-x-auto">          <table className="w-full">            <thead className="bg-gray-50">              <tr>                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Fecha</th>                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Tipo</th>                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Registros</th>                <th className="px-6 py-3 text-left text-xs font-medium text-gray-500 uppercase tracking-wider">Estado</th>              </tr>            </thead>            <tbody className="bg-white divide-y divide-gray-200">              {syncHistory.length > 0 ? syncHistory.map((item, index) => (                <tr key={index} className="hover:bg-gray-50">                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">                    {new Date(item.date).toLocaleString()}                  </td>                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{item.type}</td>                  <td className="px-6 py-4 whitespace-nowrap text-sm text-gray-900">{item.records}</td>                  <td className="px-6 py-4 whitespace-nowrap">                    <span className={`inline-flex px-2 py-1 text-xs font-semibold rounded-full ${                      item.status === 'success'                         ? 'bg-green-100 text-green-800'                         : 'bg-red-100 text-red-800'                    }`}>                      {item.status === 'success' ? 'Exitoso' : 'Error'}                    </span>                  </td>                </tr>              )) : (                <tr>                  <td colSpan="4" className="px-6 py-8 text-center text-gray-500">                    No hay historial de sincronización disponible                  </td>                </tr>              )}            </tbody>          </table>        </div>      </div>    </div>  );  const AnalyticsTab = () => (    <div className="space-y-6">      <div className="grid grid-cols-1 lg:grid-cols-3 gap-6">        <div className="lg:col-span-2 bg-white rounded-xl border border-gray-200 p-6">          <h3 className="text-lg font-semibold text-gray-900 mb-4">Tendencias de Sincronización</h3>          <div className="h-64 bg-gradient-to-br from-blue-50 to-purple-50 rounded-lg flex items-center justify-center">            <div className="text-center">              <FiTrendingUp className="w-12 h-12 text-blue-500 mx-auto mb-2" />              <p className="text-gray-600">Gráfico de tendencias</p>              <p className="text-sm text-gray-500">Datos en tiempo real</p>            </div>          </div>        </div>                <div className="space-y-4">          <div className="bg-white rounded-xl border border-gray-200 p-6">            <h4 className="font-medium text-gray-900 mb-3">Performance</h4>            <div className="space-y-3">              <div>                <div className="flex justify-between text-sm mb-1">                  <span>Velocidad de Sync</span>                  <span>92%</span>                </div>                <div className="w-full bg-gray-200 rounded-full h-2">                  <div className="bg-green-600 h-2 rounded-full" style={{width: '92%'}}></div>                </div>              </div>              <div>                <div className="flex justify-between text-sm mb-1">                  <span>Precisión</span>                  <span>98%</span>                </div>                <div className="w-full bg-gray-200 rounded-full h-2">                  <div className="bg-blue-600 h-2 rounded-full" style={{width: '98%'}}></div>                </div>              </div>            </div>          </div>                    <div className="bg-white rounded-xl border border-gray-200 p-6">            <h4 className="font-medium text-gray-900 mb-3">Resumen Mensual</h4>            <div className="text-center">              <div className="text-2xl font-bold text-blue-600">1,247</div>              <div className="text-sm text-gray-600">Registros procesados</div>            </div>          </div>        </div>      </div>    </div>  );  const renderTabContent = () => {    switch (activeTab) {      case 'overview':        return <OverviewTab />;      case 'sync':        return <SyncTab />;      case 'history':        return <HistoryTab />;      case 'analytics':        return <AnalyticsTab />;      default:        return <OverviewTab />;    }  };  return (    <div className="space-y-6">      {/* Header del Dashboard */}      <div className="flex items-center justify-between">        <div>          <h2 className="text-2xl font-bold text-gray-900 flex items-center space-x-3">            <div className="p-2 bg-blue-100 rounded-lg">              <FiCloud className="w-6 h-6 text-blue-600" />            </div>            <span>Salesforce Dashboard</span>          </h2>          <p className="text-gray-600 mt-1">            Monitorea y gestiona tu integración con Salesforce CRM          </p>        </div>        <div className="flex items-center space-x-3">          <div className={`flex items-center space-x-2 px-3 py-2 rounded-full text-sm font-medium ${            salesforceStatus?.connected               ? 'bg-green-100 text-green-800'               : 'bg-red-100 text-red-800'          }`}>            {salesforceStatus?.connected ? (              <FiCheckCircle className="w-4 h-4" />            ) : (              <FiXCircle className="w-4 h-4" />            )}            <span>{salesforceStatus?.connected ? 'Conectado' : 'Desconectado'}</span>          </div>          <button            onClick={syncAllForms}            disabled={loading}            className="flex items-center space-x-2 px-4 py-2 bg-blue-600 text-white rounded-lg hover:bg-blue-700 disabled:opacity-50 transition-colors"          >            <FiRefreshCw className={`w-4 h-4 ${loading ? 'animate-spin' : ''}`} />            <span>{loading ? 'Sincronizando...' : 'Sincronizar'}</span>          </button>        </div>      </div>      {/* Navegación de tabs modernizada */}      <div className="flex space-x-2 p-1 bg-gray-100 rounded-xl">        {dashboardTabs.map((tab) => (          <button
            key={tab.id}
            onClick={() => setActiveTab(tab.id)}
            className={`flex items-center space-x-2 px-4 py-3 rounded-lg font-medium transition-all duration-200 ${
              activeTab === tab.id
                ? `bg-white text-${tab.color}-600 shadow-sm`
                : 'text-gray-600 hover:text-gray-900 hover:bg-white/50'
            }`}
          >
            {tab.icon}
            <span>{tab.name}</span>
          </button>
        ))}
      </div>

      {/* Contenido del tab activo */}
      <div className="transition-all duration-300">
        {renderTabContent()}
      </div>
    </div>
  );
};

export default SalesforceDashboard;
